###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
	${1/(\w+).*/$1/} (${2});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${3:/* data */}
};
$4
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
	$2
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r")) {
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
$2
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> ${3:map};
$4
endsnippet

snippet vector "std::vector (vec)"
std::vector<${1:char}> ${2:vec};
$3
endsnippet

snippet set "std::set (set)"
std::set<${1:char}> ${2:set};
$3
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
$2
endsnippet

# vim:ft=snippets:
